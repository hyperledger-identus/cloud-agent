plugins {
    id("io.github.gradle-nexus.publish-plugin") version "2.0.0"
}

group 'org.hyperledger.identus'

wrapper {
    gradleVersion = '7.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

buildscript {
    ext.kotlin_version = '1.7.21'

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply(plugin = "kotlin")
apply(plugin = "java")
apply(plugin = "org.gradle.maven-publish")
apply(plugin = "org.gradle.signing")

repositories {
    mavenLocal()
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.google.code.gson:gson:2.9.0"
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.4.2"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublications){
            from components.java
            groupId = group.toString()
            artifactId = project.name
            version = project.version.toString()
            pom {
                name.set("HyperledgerIdentus Apollo")
                description.set("Collection of the cryptographic methods used all around Identus Platform")
                url.set("https://hyperledger-identus.github.io/docs/")
                organization {
                    name.set("Hyperledger")
                    url.set("https://www.hyperledger.org/")
                }
                issueManagement {
                    system.set("Github")
                    url.set("https://github.com/hyperledger-identus/apollo")
                }
                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                developers {
                    developer {
                        id.set("amagyar-iohk")
                        name.set("Allain Magyar")
                        email.set("allain.magyar@iohk.io")
                        organization.set("IOG")
                        roles.add("developer")
                    }
                    developer {
                        id.set("yshyn-iohk")
                        name.set("Yurii Shynbuiev")
                        email.set("yurii.shynbuiev@iohk.io")
                        organization.set("IOG")
                        roles.add("developer")
                    }
                    developer {
                        id.set("elribonazo")
                        name.set("Javier Ribó")
                        email.set("javier.ribo@iohk.io")
                        organization.set("IOG")
                        roles.add("developer")
                    }
                    developer {
                        id.set("goncalo-frade-iohk")
                        name.set("Gonçalo Frade")
                        email.set("goncalo.frade@iohk.io")
                        organization.set("IOG")
                        roles.add("developer")
                    }
                    developer {
                        id.set("curtis-h")
                        name.set("Curtis Harding")
                        email.set("curtis.harding@iohk.io")
                        organization.set("IOG")
                        roles.add("developer")
                    }
                    developer {
                        id.set("mineme0110")
                        name.set("Shailesh Patil")
                        email.set("shailesh.patil@iohk.io")
                        organization.set("IOG")
                        roles.add("developer")
                    }
                    developer {
                        id.set("FabioPinheiro")
                        name.set("Fabio Pinheiro")
                        email.set("fabio.pinheiro@iohk.io")
                        organization.set("IOG")
                        roles.add("developer")
                    }
                }
                scm {
                    connection.set("scm:git:git://git@github.com/hyperledger-identus/apollo.git")
                    developerConnection.set("scm:git:ssh://git@github.com/hyperledger-identus/apollo.git")
                    url.set("https://github.com/hyperledger-identus/apollo")
                }
            }

        }
    }
}

signing {
    useInMemoryPgpKeys(
            project.findProperty("signing.signingSecretKey") as String? ?: System.getenv("GPG_PRIVATE"),
            project.findProperty("signing.signingSecretKeyPassword") as String? ?: System.getenv("GPG_PASSWORD")
    )
    sign(publishing.publications.mavenJava)
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://oss.sonatype.org/content/repositories/snapshots/"))
            username.set(System.getenv("OSSRH_USERNAME"))
            password.set(System.getenv("OSSRH_TOKEN"))
        }
    }
}