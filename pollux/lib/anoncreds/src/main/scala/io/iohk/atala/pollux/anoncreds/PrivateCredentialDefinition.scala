// package io.iohk.atala.pollux.anoncreds

// /** @param p_key
//   * @param r_key
//   *   { "p_key": { "p": "123...782", "q": "234...456" }, "r_key": { "x": "332...566", "sk": "992...237" } }
//   */
// final case class PrivateCredentialDefinition(
//     p_key: P_key,
//     r_key: R_key,
// )
// final case class P_key(p: String, q: String)

// /** r_key is an object defining the private key for the CKS revocation scheme. x is a Big (128-bit?) integer selected at
//   * random from the the group of integers defined by the order of the bilinear groups q sk is a Big (128-bit?) integer
//   * selected at random from the the group of integers defined by the order of the bilinear groups q x and sk are used as
//   * part of the revocation public key generation as defined below.
//   *
//   * @param x
//   * @param sk
//   */
// final case class R_key(x: String, sk: String)

// type DID = String

// /** he Credential Definition contains a cryptographic public key that can be used to verify CL-RSA signatures over a
//   * block of L messages m1,m2,...,mL. The Credential Definition contains a public key fragment for each message being
//   * signed by signatures generated with the respective private key. The length of the block of messages, L, being signed
//   * is defined by referencing a specific Schema with a certain number of attributes, A = a1,a2,.. and setting L to A+1.
//   * The additional message being signed as part of a credential is for a link_secret (called the link_secret everywhere
//   * except in the existing open source code and data models) attribute which is included in all credentials. This value
//   * is blindly contributed to the credential during issuance and used to bind the issued credential to the entity to
//   * which it was issued.
//   *
//   * All integers within the above Credential Definition example json are shown with ellipses (e.g. 123...789). They are
//   * 2048-bit integers represented as 617 decimal digits. These integers belong to an RSA-2048 group characterised by the
//   * n defined in the Credential Definition.
//   *
//   * issuerId - the Issuer Identifier of the credential definition. MUST adhere to Issuer Identifiers rules. schemaId -
//   * (string) The identifier of the Schema on which the Credential Definition is based. The format of the identifier is
//   * dependent on the AnonCreds Objects Method used in publishing the Schema. type - (string) The signature type of the
//   * Credential Definition. For this version of AnonCreds the value is always CL. tag (string) - the tag value passed in
//   * by the Issuer to an AnonCredâ€™s Credential Definition create and store implementation. value - (object) an Ursa
//   * native object with the primary and revocation fields. primary is the data used for generating credentials. n is a
//   * safe RSA-2048 number. A large semiprime number such that n = p.q, where p and q are safe primes. A safe prime p is a
//   * prime number such that p = 2p'+ 1, where p' is also a prime. Note: p and q are the private key for the public CL-RSA
//   * key this Credential Definition represents. r is an object that defines a CL-RSA public key fragment for each
//   * attribute in the credential. Each fragment is a large number generated by computing s^{xri} where xri is a randomly
//   * selected integer between 2 and p'q'-1. master_secret (also known as link secret, but kept as master_secret for
//   * backwards compatibility) is the name of an attribute that can be found in each Credential Definition. The associated
//   * private key is used for signing a blinded value given by the Holder to the Issuer during credential issuance,
//   * binding the credential to the Holder. The rest of the attributes in the list are those defined in the Schema. The
//   * attribute names are normalized (lower case, spaces removed) and listed in the Credential Definition in alphabetical
//   * order. rctxt is equal to s^(xrctxt), where xrctxt is a randomly selected integer between 2 and p'q'-1. (I believe
//   * this is used for the commitment scheme, allowing entities to blindly contribute values to credentials.) s is a
//   * randomly selected quadratic residue of n. This makes up part of the CL-RSA public key, independent of the message
//   * blocks being signed. z is equal to s^(xz), where xz is a randomly selected integer between 2 and p'q'-1. This makes
//   * up part of the CL-RSA public key, independent of the message blocks being signed.
//   *
//   * @param issuerId
//   * @param schemaId
//   * @param type
//   * @param tag
//   * @param value
//   */
// final case class CredentialDefinition2( // FIXME name
//     issuerId: DID,
//     schemaId: String,
//     `type`: String, // FIXME//SigType,
//     tag: String,
//     value: CredentialDefinitionValue,
// )
// final case class CredentialDefinitionValue(
//     primary: CredentialDefinitionValuePrimary,
//     rctxt: String,
//     s: String,
//     z: String,
//     revocation: Option[CredentialDefinitionValueRevocation]
// )
// final case class CredentialDefinitionValuePrimary(
//     n: String,
//     r: String
// )

// /** Revocation is the data used for managing the revocation status of credentials issued using this Credential
//   * Definition.
//   *
//   * @param g
//   *   is a generator for the elliptic curve group G1
//   * @param g_dash
//   *   is a generator for the elliptic curve group G2
//   * @param h
//   *   is a random elliptic curve element selected from G1
//   * @param h0
//   *   is a random elliptic curve element selected from G1
//   * @param h1
//   *   is a random elliptic curve element selected from G1
//   * @param h2
//   *   is a random elliptic curve element selected from G1
//   * @param h_cap
//   *   is a random elliptic curve element selected from G2
//   * @param htilde
//   *   is a random elliptic curve element selected from G1
//   * @param pk
//   *   is the public key in G1 for the issuer respective to this accumulator. (g^sk)
//   * @param u
//   *   is a random elliptic curve element selected from G2
//   * @param y
//   *   is the an elliptic curve element in G1 calculated as h_cap^x, where x is selected at random by the issuer from the
//   *   set Z_q.
//   */
// final case class CredentialDefinitionValueRevocation(
//     g: String, // "1 154...813 1 11C...D0D 2 095..8A8",
//     g_dash: String, // "1 1F0...000",
//     h: String, // "1 131...8A8",
//     h0: String, // "1 1AF...8A8",
//     h1: String, // "1 242...8A8",
//     h2: String, // "1 072...8A8",
//     h_cap: String, // "1 196...000",
//     htilde: String, // "1 1D5...8A8",
//     pk: String, // "1 0E7...8A8",
//     u: String, // "1 18E...000",
//     y: String, // "1 068...000"
// )
