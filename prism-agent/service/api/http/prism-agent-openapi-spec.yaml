openapi: 3.0.1
info:
  title: Prism Agent OpenAPI specification
  description: OpenAPI specification for Decentralized Identifiers (DID) Operations
  version: 0.41.0
  contact:
    name: Core DID
    email: atala-coredid@iohk.io
servers:
  - url: "https://k8s-dev.atalaprism.io/prism-agent/"
  - url: "http://localhost/prism-agent"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
security:
  - ApiKeyAuth: []
tags:
  # Castor
  - name: DID
    description: DID REST API
  - name: DID Registrar
    description: DID Registrar REST API (Prism Agent managed DID)
  # Pollux
  - name: Schema Registry
    description: Schema Registry REST API
  - name: Verification
    description: Verification Policies REST API
  - name: Present Proof
    description: Present Proof REST API
  # Connect
  - name: Connections Management
    description: Manage [DIDComm v2](https://identity.foundation/didcomm-messaging/spec/v2.0/) connections

paths:
  # ----------------------------------
  # Castor
  # ----------------------------------
  /dids/{didRef}:
    $ref: "./tapir-generated.yaml#/paths/~1dids~1{didRef}"

  /did-registrar/dids:
    $ref: "./tapir-generated.yaml#/paths/~1did-registrar~1dids"

  /did-registrar/dids/{didRef}:
    $ref: "./tapir-generated.yaml#/paths/~1did-registrar~1dids~1{didRef}"

  /did-registrar/dids/{didRef}/publications:
    $ref: "./tapir-generated.yaml#/paths/~1did-registrar~1dids~1{didRef}~1publications"

  /did-registrar/dids/{didRef}/updates:
    $ref: "./tapir-generated.yaml#/paths/~1did-registrar~1dids~1{didRef}~1updates"

  /did-registrar/dids/{didRef}/deactivations:
    $ref: "./tapir-generated.yaml#/paths/~1did-registrar~1dids~1{didRef}~1deactivations"

  # ----------------------------------
  # Pollux
  # ----------------------------------
  /schema-registry/schemas:
    get:
      tags:
        - Schema Registry
      summary: Lookup schemas by indexed fields
      description:
        "Lookup schemas by `author`, `name`, `tags` parameters and control
        the pagination by `offset` and `limit` parameters"
      operationId: lookupSchemasByQuery
      parameters:
        - name: author
          in: query
          required: false
          schema:
            type: string
          example: did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff
        - name: name
          in: query
          required: false
          schema:
            type: string
          example: DrivingLicense
        - name: version
          in: query
          required: false
          schema:
            type: string
          example: 1.0.0
        - name: tags
          in: query
          required: false
          schema:
            type: string
          example: driving
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Collection of CredentialSchema records.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/CredentialSchemaResponsePage"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

    post:
      tags:
        - Schema Registry
      summary: Publish new schema to the schema registry
      description:
        Create the new credential schema record with metadata and internal
        JSON Schema on behalf of Cloud Agent. The credential schema will be signed
        by the keys of Cloud Agent and issued by the DID that corresponds to it
      operationId: createSchema
      requestBody:
        description: JSON object required for the credential schema creation
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/CredentialSchemaInput"
        required: true
      responses:
        "201":
          description: "The new credential schema record is successfully created"
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/CredentialSchemaResponse"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  /schema-registry/{author}/{id}:
    put:
      tags:
        - Schema Registry
      summary: Publish the new version of the credential schema to the schema registry
      description:
        Publish the new version of the credential schema record with metadata
        and internal JSON Schema on behalf of Cloud Agent. The credential schema will
        be signed by the keys of Cloud Agent and issued by the DID that corresponds
        to it.
      operationId: updateSchema
      parameters:
        - name: author
          in: path
          description:
            DID of the identity which authored the credential schema. A piece
            of Metadata.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description:
            A locally unique identifier to address the schema. UUID is generated
            by the backend.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: JSON object required for the credential schema update
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/CredentialSchemaInput"
        required: true
      responses:
        "200":
          description: The credential schema record is successfully updated
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/CredentialSchemaResponse"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  /schema-registry/schemas/{guid}:
    get:
      tags:
        - Schema Registry
      summary: Fetch the schema from the registry by `guid`
      description: Fetch the credential schema by the unique identifier
      operationId: getSchemaById
      parameters:
        - name: guid
          in: path
          description: Globally unique identifier of the credential schema record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: CredentialSchema found by `guid`
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/CredentialSchemaResponse"
        "404":
          $ref: "./shared/responses.yaml#/components/responses/NotFound"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  # ----------------------------------
  # Verification Policies
  # ----------------------------------
  /verification/policies:
    get:
      operationId: lookupVerificationPoliciesByQuery
      tags:
        - Verification
      summary: Lookup verification policies by query
      description: Lookup verification policies by `name`
      parameters:
        - $ref: ./shared/parameters.yaml#/components/parameters/offset
        - $ref: ./shared/parameters.yaml#/components/parameters/limit
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "List of Verification policies"
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyPage"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"
    post:
      operationId: createVerificationPolicy
      tags:
        - Verification
      summary: Create the new verification policy
      description: Create the new verification policy
      requestBody:
        description: Create verification policy object
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyInput"
        required: true
      responses:
        "201":
          description: "Verification policy created successfully"
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  /verification/policies/{id}:
    get:
      operationId: getVerificationPolicyById
      tags:
        - Verification
      summary: Fetch the verification policy by id
      description: Get the verification policy by id
      parameters:
        - name: id
          in: path
          description: Get the verification policy by id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Verification policy"
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "404":
          $ref: "./shared/responses.yaml#/components/responses/NotFound"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"
    put:
      operationId: updateVerificationPolicy
      tags:
        - Verification
      summary: Update the verification policy object by id
      description: Update the verification policy entry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: nonce
          in: query
          description: Nonce of the previous VerificationPolicy
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update verification policy object
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyInput"
        required: true
      responses:
        "200":
          description: "Verification policy updated successfully"
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "404":
          $ref: "./shared/responses.yaml#/components/responses/NotFound"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"
    delete:
      operationId: deleteVerificationPolicyById
      tags:
        - Verification
      summary: Delete the verification policy by id
      description: Delete the verification policy by id
      parameters:
        - name: id
          in: path
          description: Delete the verification policy by id
          required: true
          schema:
            type: string
            format: uuid
        - name: nonce
          in: query
          description: Nonce of the previous VerificationPolicy
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: "Verification policy deleted successfully"
        "400":
          $ref: "./shared/responses.yaml#/components/responses/BadRequest"
        "404":
          $ref: "./shared/responses.yaml#/components/responses/NotFound"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  ## Issue Credential Protocol

  /issue-credentials/credential-offers:
    $ref: "./tapir-generated.yaml#/paths/~1issue-credentials~1credential-offers"

  /issue-credentials/records:
    $ref: "./tapir-generated.yaml#/paths/~1issue-credentials~1records"

  /issue-credentials/records/{recordId}:
    $ref: "./tapir-generated.yaml#/paths/~1issue-credentials~1records~1{recordId}"

  /issue-credentials/records/{recordId}/accept-offer:
    $ref: "./tapir-generated.yaml#/paths/~1issue-credentials~1records~1{recordId}~1accept-offer"

  /issue-credentials/records/{recordId}/issue-credential:
    $ref: "./tapir-generated.yaml#/paths/~1issue-credentials~1records~1{recordId}~1issue-credential"

  ## Present proof

  /present-proof/presentations:
    post:
      operationId: requestPresentation
      tags: ["Present Proof"]
      summary: As a Verifier, create a new proof presentation request and send it to the Prover.
      description: Holder presents proof derived from the verifiable credential to verifier.
      requestBody:
        description: The present proof creation request.
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationInput"
      responses:
        "201":
          description: The proof presentation request was created successfully and will be sent asynchronously to the Prover.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationOutput"
        "422":
          description: Creating the proof presentation request failed for an unexpected reason. More information on the error can be found in the response body.
          content:
            application/json:
              schema:
                $ref: "./shared/schemas.yaml#/components/schemas/ErrorResponse"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

    get:
      operationId: getAllPresentation
      tags: ["Present Proof"]
      summary: Gets the list of proof presentation records.
      description: list of presentation statuses
      parameters:
        - $ref: "./shared/parameters.yaml#/components/parameters/offset"
        - $ref: "./shared/parameters.yaml#/components/parameters/limit"
        - name: thid
          in: query
          description: The thid of a DIDComm communication.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The list of proof presentation records.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/PresentationStatusPage"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  /present-proof/presentations/{recordId}:
    patch:
      operationId: updatePresentation
      tags: ["Present Proof"]
      summary: Updates the proof presentation record matching the unique identifier, with the specific action to perform.
      description: Accept or reject presentation of proof request
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/presentationRecordIdInPath
      requestBody:
        description: The action to perform on the proof presentation record.
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationAction"
      responses:
        "200":
          description: The proof presentation record was successfully updated.
          content:
            application/json: {}
        "404":
          $ref: "./shared/responses.yaml#/components/responses/NotFound"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"
    get:
      operationId: getPresentation
      tags: ["Present Proof"]
      summary: Gets an existing proof presentation record by its unique identifier. More information on the error can be found in the response body.
      description: Returns an existing presentation record by id.
      parameters:
        - $ref: "./pollux/parameters.yaml#/components/parameters/presentationRecordIdInPath"
      responses:
        "200":
          description: The proof presentation record.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/PresentationStatus"
        "404":
          $ref: "./shared/responses.yaml#/components/responses/NotFound"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  # ----------------------------------
  # Connect
  # ----------------------------------
  /connections:
    post:
      operationId: createConnection
      tags: ["Connections Management"]
      summary: Creates a new connection record and returns an Out of Band invitation.
      description: |
        Generates a new Peer DID and creates an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation.
        It returns a new connection record in `InvitationGenerated` state.
        The request body may contain a `label` that can be used as a human readable alias for the connection, for example `{'label': "Bob"}`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/CreateConnectionRequest"

      responses:
        "201":
          description: The connection record was created successfully, and is returned in the response body.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "422":
          description: The connection record creation failed. More information on the error can be found in the response body.
          content:
            application/json:
              schema:
                $ref: "./shared/schemas.yaml#/components/schemas/ErrorResponse"

    get:
      operationId: getConnections
      tags: ["Connections Management"]
      summary: Gets the list of connection records.
      description: Get the list of connection records paginated
      parameters:
        - $ref: "./shared/parameters.yaml#/components/parameters/offset"
        - $ref: "./shared/parameters.yaml#/components/parameters/limit"
      responses:
        "200":
          description: The list of connection records.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ConnectionsPage"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  /connections/{connectionId}:
    get:
      operationId: getConnection
      tags: ["Connections Management"]
      summary: Gets an existing connection record by its unique identifier.
      description: Gets an existing connection record by its unique identifier
      parameters:
        - $ref: "./connect/parameters.yaml#/components/parameters/connectionId"
      responses:
        "200":
          description: The connection record.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "404":
          $ref: "./shared/responses.yaml#/components/responses/NotFound"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"

  /connection-invitations:
    post:
      operationId: acceptConnectionInvitation
      tags: ["Connections Management"]
      summary: Accepts an Out of Band invitation.
      description: |
        Accepts an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation, generates a new Peer DID,
        and submits a Connection Request to the inviter.
        It returns a connection object in `ConnectionRequestPending` state, until the Connection Request is eventually sent to the inviter by the prism-agent's background process. The connection object state will then automatically move to `ConnectionRequestSent`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/AcceptConnectionInvitationRequest"

      responses:
        "200":
          description: The invitation was successfully accepted.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "500":
          $ref: "./shared/responses.yaml#/components/responses/InternalServerError"
