openapi: 3.0.1
info:
  title: PrismAgent OpenAPI specification
  description: OpenAPI specification for Decentralized Identifiers (DID) Operations
  version: 0.1.0
  contact:
    name: Core DID
    email: atala-coredid@iohk.io
servers:
  - url: "https://k8s-dev.atalaprism.io/prism-agent/"
  - url: "http://localhost/prism-agent"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
security:
  - ApiKeyAuth: [ ]
tags:
  # Castor
  - name: DID
    description: DID REST API
  - name: DID Operations
    description: DID Operations REST API
  - name: DID Authentication
    description: DID Authentication REST API
  - name: DID Registrar
    description: DID Registrar REST API
  # Pollux
  - name: Schema Registry
    description: Schema Registry REST API
  - name: Present Proof
    description: Present Proof REST API
  # Connect
  - name: Connections Management
    description: API for driving connection process.


paths:
  # ----------------------------------
  # Castor
  # ----------------------------------
  /dids:
    post:
      tags: [ "DID" ]
      operationId: createDid
      summary: Publish DID create operation to blockchain.
      description: Publish DID create operation to blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateDIDRequest"
      responses:
        "202":
          description: Created DID. Publishing DID or Proof to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID publication failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}:
    get:
      tags: [ "DID" ]
      operationId: getDid
      summary: Resolve DID.
      description: Resolve DID.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "200":
          description: The DID resource
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}/updates:
    post:
      tags: [ "DID" ]
      operationId: updateDid
      summary: Publish DID update operation to blockchain.
      description: Publish DID update operation to blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/UpdateDIDRequest"
      responses:
        "202":
          description: Updated DID. Publishing Updated DID or Update Proof to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID Update failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}/deactivations:
    post:
      tags: [ "DID" ]
      operationId: deactivateDID
      summary: Publish DID deactivate operation to blockchain.
      description: Publish DID deactivate operation to blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/DeactivateDIDRequest"
      responses:
        "202":
          description: Deactivating DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID Deactivation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}/recoveries:
    post:
      tags: [ "DID" ]
      operationId: recoverDid
      summary: Publish DID recover operation to blockchain.
      description: Publish DID recover operation to blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/RecoverDIDRequest"
      responses:
        "202":
          description: Recovered DID. Publishing Recovered DID or Recovery Proof to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID Update failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-operations/{didOperationRef}:
    get:
      tags: [ "DID Operations" ]
      operationId: getDidOperation
      summary: Get Did Operation.
      description: Get Did Operation.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didOperationRefInPath"
      responses:
        "200":
          description: The DID Operation resource
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DidOperation"
        "404":
          description: There is no DID Operation existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}/operations:
    get:
      tags: [ "DID Operations" ]
      operationId: getDidOperationsByDidRef
      summary: Get All DID Operations for given DID.
      description: Get All DID Operations for given DID.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "200":
          description: All DID Operations for a given DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/GetDIDOperationsByDIDRefResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /authentication/challenges:
    post:
      tags: [ "DID Authentication" ]
      operationId: createDidAuthenticationChallenge
      summary: Create a new authentication challenge
      deprecated: true
      description: |
        Create a new authentication challenge that will be later verified
        by Castor for a relying-party.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateAuthenticationChallengeRequest"
      responses:
        "200":
          description: Authentication challenge created successfully
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/CreateAuthenticationChallengeResponse"
        "400":
          description: A create AuthenticationChallenge payload is malformed
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /authentication/challenge-submissions:
    post:
      tags: [ "DID Authentication" ]
      operationId: createDidAuthenticationChallengeSubmission
      summary: Create a verification from challenge
      deprecated: true
      description: |
        Submit a challenge submission that will be verified by Castor for a relying-party.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/AuthenticationChallengeSubmissionRequest"
      responses:
        "200":
          description: Authentication challenge has been successfully verified
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/AuthenticationChallengeSubmissionResponse"
        "400":
          description: ChallengeSubmission is malformed
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids:
    post:
      tags: [ "DID Registrar" ]
      operationId: createManagedDid
      summary: Create DID with the DID Document template where keys are managed by PrismAgent.
      description: Create DID with the DID Document template where keys are managed by PrismAgent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDidRequest"
      responses:
        "200":
          description: Created unpublished DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDIDResponse"
        "422":
          description: The DID creation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids/{didRef}/publications:
    post:
      tags: [ "DID Registrar" ]
      operationId: publishManagedDid
      summary: Publish DID stored in PrismAgent wallet to blockchain
      description: Publish DID stored in PrismAgent wallet to blockchain
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "202":
          description: Publishing DID to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
        "422":
          description: The DID publication failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  # ----------------------------------
  # Pollux
  # ----------------------------------
  /schema-registry/schemas:
    post:
      tags: [ "Schema Registry" ]
      operationId: createSchema
      summary: Publish new schema to the schema registry
      description: |-
        Publish the new schema with claims to the schema registry on behalf of Cloud Agent
        Schema will be signed by the keys of Cloud Agent and issued by the DID that corresponds to it
      requestBody:
        description: SchemaInput object with the metadata and claims
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/W3CSchemaInput"
      responses:
        "201":
          description: The new schema is created
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CSchema"
        "400":
          description: Schema input document cannot be used for the schema creation
        "401":
          description: Client is unauthorized to call the API
    get:
      tags: [ "Schema Registry" ]
      operationId: fetchSchemasByQuery
      summary: Fetch schemas by query
      description: |-
        Lookup the schemas in the registry to query by the author, version, name
      parameters:
        - in: query
          name: author
          description: Fetch schemas by the author (issuer) DID
          example: "did:prism:abcdefg"
          schema:
            type: string
        - in: query
          name: name
          description: Fetch schemas by the name
          example: UniversityDegree
          schema:
            type: string
        - in: query
          name: offset
          description: Pagination offset
          example: 15
          schema:
            type: integer
        - in: query
          name: limit
          description: Pagination limit
          example: 100
          schema:
            type: integer
      responses:
        "200":
          description: Schemas are fetched by the query
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CSchemaPaginated"
  /schema-registry/schemas/{id}:
    get:
      tags: [ "Schema Registry" ]
      operationId: getSchemaById
      summary: Fetch the schema from the registry by id
      description: |-
        Fetch the schema by the unique identifier. Verifiable Credential Schema in json format is returned
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique identifier of the schema published in the registry
          example: "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.0"
      responses:
        "200":
          description: Successful response, W3C compliant schema is returned
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CSchema"
        "404":
          description: Schema is not found by id
  ## Issue Credential Protocol

  /issue-credentials/credential-offers:
    post:
      tags: [ "Issue Credentials Protocol" ]
      operationId: createCredentialOffer
      summary: As a VC issuer, create a new credential offer to be sent to a VC holder
      requestBody:
        description: CredentialOffer object with schema identifier and claims
        required: true
        content:
          application/json:
            schema:
              $ref: ./pollux/schemas.yaml#/components/schemas/CreateIssueCredentialRecordRequest
      responses:
        "201":
          description: The issue credential record
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "422":
          description: The issue credential record creation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
  
  /issue-credentials/records:
    get:
      tags: [ "Issue Credentials Protocol" ]
      operationId: getCredentialRecords
      summary: Get credential records
      responses:
        "200":
          description: The issue credential records
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecordCollection
        "500":
          description: Retrieving the issue credential records failed for an unexpected reason.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}:
    get:
      tags: [ "Issue Credentials Protocol" ]
      operationId: getCredentialRecord
      summary: Get a credential record by Id
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential record
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record matching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"
  
  /issue-credentials/records/{recordId}/accept-offer:
    post:
      tags: [ "Issue Credentials Protocol" ]
      operationId: acceptCredentialOffer
      summary: As a VC holder, accept a credential offer received from an issuer
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential offer has been accepted
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record maatching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}/issue-credential:
    post:
      tags: [ "Issue Credentials Protocol" ]
      operationId: issueCredential
      summary: As a VC issuer, issue the VC for the specified issue credential record
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The VC has been issued
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record maatching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /revocation-registry/credential-status/{id}:
    get:
      tags: [ "Revocation Registry" ]
      operationId: getCredentialRevocationStatusById
      summary: Get credentials revocation status by credential id
      description: Get credentials revocation status by credential id
      parameters:
        - in: path
          name: id
          description: Verifiable Credential Id
          schema:
            type: string
          required: true
          example: "abcde12345"
      responses:
        "200":
          description: Status request processed successfully
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialStatus"
  /revocation-registry/revoke:
    post:
      tags: [ "Revocation Registry" ]
      operationId: revokeCredentialById
      summary: Revoke credential by id
      description: Revoke credential by id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialRevocationRequest"
        required: true
      responses:
        "202":
          description: Revocation request successfully submitted
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialRevocationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access credential revocation status.

  /revocation-registry/operations/{id}:
    get:
      tags: [ "Revocation Registry" ]
      operationId: getRevocationOperationStatusById
      summary: Get revocation operation status by id
      description: Get revocation operation status by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success, operation status is returned
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/RevocationStatus"

  /present-proof/verifiable-presentations:
    post:
      tags: [ "Present Proof" ]
      operationId: createVerifiablePresentation
      summary: Create new instance of VerifiablePresentation
      description: Verifier creates the instance of Verifiable Presentation object to be used in present proof communication protocol with Prover
      requestBody:
        description: PresentationInput object with the schema references and claims
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentationInput"
      responses:
        "201":
          description: The new presentation is created
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentation"
        # TODO: Add other corner cases and error responses

    get:
      tags: [ "Present Proof" ]
      operationId: fetchPresentationByQuery
      summary: Fetch presentation by query
      description: Fetch presentation by query
      parameters: # TODO: Define the parameters for the presentation lookup
        - in: query
          name: name
          description: Fetch presentation by the name
          example: TemplateName
          schema:
            type: string
        - in: query
          name: offset
          description: Pagination offset
          example: 15
          schema:
            type: integer
        - in: query
          name: limit
          description: Pagination limit
          example: 100
          schema:
            type: integer
      responses:
        "200":
          description: Presentations are fetched by the query
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentationPaginated"
  /present-proof/verifiable-presentations/{id}:
    get:
      tags: [ "Present Proof" ]
      operationId: getPresentationById
      summary: Fetch the presentation from the collection by id
      description: Fetch the presentation from the collection by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique identifier of the presentation
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      responses:
        "200":
          description: Successful response, the presentation is returned
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentation"

  # ----------------------------------
  # Connect
  # ----------------------------------
  /connections:
    post:
      tags: [ "Connections Management" ]
      operationId: createConnection
      summary: Creates new connection and returns an invitation.
      description: |-
        Returns new invitation object and creates new connection state record in `pending` state. 
        Content of invitation depends on DIDComm protocol used, here is an example of how it would look like for `AIP 1.0 connection/v1` protocol. 
        Once connection invitation is accepted, Agent should filter all additional attempts to accept it. 
        We consider mult-party connections as out of scope for now.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/CreateConnectionRequest"

      responses:
        "201":
          description: The connection record
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "422":
          description: The connection record creation failed.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"

    get:
      tags: [ "Connections Management" ]
      operationId: getConnections
      summary: Returns a list of connections.
      responses:
        "200":
          description: List of connection state objects
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ConnectionCollection"
        "500":
          description: Retrieving the connection records failed for an unexpected reason.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"

  /connections/{connectionId}:
    get:
      tags: [ "Connections Management" ]
      parameters:
        - $ref: "./connect/schemas.yaml#/components/parameters/connectionId"
      operationId: getConnection
      summary: Returns an existing connection record by id.
      responses:
        "200":
          description: Connection state record
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "404":
          description: There is no issue credential record matching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"
    delete:
      tags: [ "Connections Management" ]
      parameters:
        - $ref: "./connect/schemas.yaml#/components/parameters/connectionId"
      operationId: deleteConnection
      summary: Deletes existing connection record.
      description: Just deletes connection state in the Agent, it does not include notifing other party that connection is deleted. We should consider this feature for the future. If additional action is attempted over deleted connection, it should thow error (no matter which side deleted connection).
      responses:
        "200":
          description: Successful delete
        "404":
          description: Connection state record not found for given `connectionId`

  /connection-invitations:
    post:
      tags: [ "Connections Management" ]
      operationId: acceptConnectionInvitation
      summary: Accepts externally received invitation.
      description: Creates new connection state record in `pending` state. It is assumed that application would first decode and validate the invitation. When it is accepted in the application side, it should be submitted in raw format to this API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/AcceptConnectionInvitationRequest"

      responses:
        "200":
          description: Invitation successfully accepted.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "500":
          description: Storing the connection invitation failed for an unexpected reason.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"       
