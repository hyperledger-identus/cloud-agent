---
openapi: 3.0.1
info:
  title: PrismAgent OpenAPI specification
  description: OpenAPI specification for Decentralized Identifiers (DID) Operations
  version: 0.41.0
  contact:
    name: Core DID
    email: atala-coredid@iohk.io
servers:
  - url: "https://k8s-dev.atalaprism.io/prism-agent/"
  - url: "http://localhost/prism-agent"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
security:
  - ApiKeyAuth: []
tags:
  # Castor
  - name: DID
    description: Generic DID Endpoints
  - name: DID Registrar
    description: DID Endpoints where keys are managed by PrismAgent
  # Pollux
  - name: Schema Registry
    description: Schema Registry REST API
  - name: Verification
    description: Verification Policies REST API
  - name: Present Proof
    description: Present Proof REST API
  # Connect
  - name: Connections Management
    description: Manage [DIDComm v2](https://identity.foundation/didcomm-messaging/spec/v2.0/) connections

paths:
  # ----------------------------------
  # Castor
  # ----------------------------------
  /dids/{didRef}:
    get:
      tags: ["DID"]
      operationId: getDid
      summary: Resolve Prism DID
      description: Resolve Prism DID
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "200":
          description: The DID resource
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids:
    get:
      tags: ["DID Registrar"]
      operationId: listManagedDid
      summary: List all DIDs stored in PrismAgent's wallet
      description: |
        List all DIDs stored in PrismAgent's wallet.
        Return a paginated items ordered by created timestamp.
        If the `limit` parameter is not set, it defaults to 100 items per page.
      parameters:
        - $ref: ./shared/parameters.yaml#/components/parameters/offset
        - $ref: ./shared/parameters.yaml#/components/parameters/limit
      responses:
        "200":
          description: List PrismAgent managed DIDs
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ManagedDIDPage"
        "500":
          description: Internal Error.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

    post:
      tags: ["DID Registrar"]
      operationId: createManagedDid
      summary: Create unpublished DID and store it in PrismAgent's wallet
      description: |
        Create unpublished DID and store it inside PrismAgent's wallet. The private keys of the DID is
        managed by PrismAgent. The DID can later be published to the VDR using publications endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDidRequest"
      responses:
        "200":
          description: Created unpublished DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDIDResponse"
        "422":
          description: The DID creation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids/{didRef}:
    get:
      tags: ["DID Registrar"]
      operationId: getManagedDid
      summary: Get DID stored in PrismAgent's wallet
      description: Get DID stored in PrismAgent's wallet
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "200":
          description: Get PrismAgent managed DID
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ManagedDID"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids/{didRef}/publications:
    post:
      tags: ["DID Registrar"]
      operationId: publishManagedDid
      summary: Publish the DID stored in PrismAgent's wallet to the VDR
      description: |
        Publish the DID stored in PrismAgent's wallet to the VDR.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "202":
          description: Publishing DID to the VDR.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
        "422":
          description: The DID publication failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids/{didRef}/updates:
    post:
      tags: ["DID Registrar"]
      operationId: updateManagedDid
      summary: Update DID in PrismAgent's wallet and post update operation to the VDR
      description: |
        Update DID in PrismAgent's wallet and post update operation to the VDR.
        This endpoint updates the DID document from last confirmed operation.
        Submitting multiple update operations without waiting for confirmation will result in
        some operation being rejected as only one operation can be appended from last confirmed operation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/UpdateManagedDIDRequest"
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "202":
          description: Publishing DID to the VDR.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
        "422":
          description: The DID update failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids/{didRef}/deactivations:
    post:
      tags: ["DID Registrar"]
      operationId: deactivateManagedDid
      summary: Deactivate DID in PrismAgent's wallet and post deactivate operation to blockchain
      description: |
        Deactivate DID in PrismAgent's wallet and post deactivate operation to blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "202":
          description: Publishing DID to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
        "422":
          description: The DID deactivation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  # ----------------------------------
  # Pollux
  # ----------------------------------
  /schema-registry/schemas:
    get:
      tags:
        - Schema Registry
      summary: Lookup schemas by indexed fields
      description:
        "Lookup schemas by `author`, `name`, `tags` parameters and control
        the pagination by `offset` and `limit` parameters "
      operationId: lookupSchemasByQuery
      parameters:
        - $ref: ./shared/parameters.yaml#/components/parameters/offset
        - $ref: ./shared/parameters.yaml#/components/parameters/limit
        - name: author
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: tags
          in: query
          required: false
          schema:
            type: string
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchemaPage
        "400":
          description:
            "Invalid value for: query parameter author, Invalid value for:
            query parameter name, Invalid value for: query parameter tags, Invalid
            value for: query parameter offset, Invalid value for: query parameter
            limit, Invalid value for: query parameter order"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/InternalServerError
    post:
      tags:
        - Schema Registry
      summary: Publish new schema to the schema registry
      description:
        Publish the new schema with attributes to the schema registry on
        behalf of Cloud Agent. Schema will be signed by the keys of Cloud Agent and
        issued by the DID that corresponds to it
      operationId: createSchema
      requestBody:
        description: Create schema input object with the metadata and attributes
        content:
          application/json:
            schema:
              $ref: ./pollux/schemas.yaml#/components/schemas/VerificationCredentialSchemaInput
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchema
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/InternalServerError
  /schema-registry/schemas/{id}:
    get:
      tags:
        - Schema Registry
      summary: Fetch the schema from the registry by id
      description:
        Fetch the schema by the unique identifier. Verifiable Credential
        Schema in json format is returned.
      operationId: getSchemaById
      parameters:
        - name: id
          in: path
          description: Get the schema by id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchema
        "400":
          description: "Invalid value for: path parameter id"
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/NotFound

  # ----------------------------------
  # Verification Policies
  # ----------------------------------
  /verification/policies:
    get:
      tags:
        - Verification
      summary: Lookup verification policies by query
      description:
        Lookup verification policies by `name`, and control the pagination
        by `offset` and `limit` parameters
      operationId: lookupVerificationPoliciesByQuery
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyPage"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
    post:
      tags:
        - Verification
      summary: Create the new verification policy
      description: Create the new verification policy
      operationId: createVerificationPolicy
      requestBody:
        description: Create verification policy object
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyInput"
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
  /verification/policies/{id}:
    get:
      tags:
        - Verification
      summary: Fetch the verification policy by id
      description: Get the verification policy by id
      operationId: getVerificationPolicyById
      parameters:
        - name: id
          in: path
          description: Get the verification policy by id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/NotFound"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
    put:
      tags:
        - Verification
      summary: Update the verification policy object by id
      description: Update the verification policy entry
      operationId: updateVerificationPolicy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: nonce
          in: query
          description: Nonce of the previous VerificationPolicy
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update verification policy object
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyInput"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/NotFound"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
    delete:
      tags:
        - Verification
      summary: Delete the verification policy by id
      description: Delete the verification policy by id
      operationId: deleteVerificationPolicyById
      parameters:
        - name: id
          in: path
          description: Delete the verification policy by id
          required: true
          schema:
            type: string
            format: uuid
        - name: nonce
          in: query
          description: Nonce of the previous VerificationPolicy
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: ""
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/NotFound"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"

  ## Issue Credential Protocol

  /issue-credentials/credential-offers:
    post:
      tags: ["Issue Credentials Protocol"]
      operationId: createCredentialOffer
      summary: As a credential issuer, create a new credential offer to be sent to a holder.
      requestBody:
        description: The credential offer object.
        required: true
        content:
          application/json:
            schema:
              $ref: ./pollux/schemas.yaml#/components/schemas/CreateIssueCredentialRecordRequest
      responses:
        "201":
          description: The issue credential record was created successfully, and is returned in the response body.
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "422":
          description: The issue credential record creation failed. More information on the error can be found in the response body.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records:
    get:
      tags: ["Issue Credentials Protocol"]
      operationId: getCredentialRecords
      summary: Gets the list of issue credential records.
      responses:
        "200":
          description: The list of issue credential records.
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecordCollection
        "500":
          description: Retrieving the issue credential records failed for an unexpected reason. More information on the error can be found in the response body.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}:
    get:
      tags: ["Issue Credentials Protocol"]
      operationId: getCredentialRecord
      summary: Gets an existing issue credential record by its unique identifier.
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential record.
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record matching the given identifier.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}/accept-offer:
    post:
      tags: ["Issue Credentials Protocol"]
      operationId: acceptCredentialOffer
      summary: As a holder, accepts a credential offer received from an issuer.
      description: Accepts a credential offer received from a VC issuer and sends back a credential request.
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential offer was successfully accepted.
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record matching the given identifier.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}/issue-credential:
    post:
      tags: ["Issue Credentials Protocol"]
      operationId: issueCredential
      summary: As an issuer, issues the verifiable credential related to the specified record.
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The request was processed successfully and the credential will be issued asynchronously.
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record matching the given identifier.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /present-proof/presentations:
    post:
      tags: ["Present Proof"]
      operationId: requestPresentation
      requestBody:
        description: Request presentation of some type of Proof or Proofs (VC)
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationInput"
      responses:
        "201":
          description: The new presentation is created
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationOutput"
        "422":
          description: Failed to create a presentation request.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
    get:
      tags: ["Present Proof"]
      operationId: getAllPresentation
      responses:
        "200":
          description: List of presentations and status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./pollux/schemas.yaml#/components/schemas/PresentationStatus"
        "404":
          description: There is no presentations record
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
  /present-proof/presentations/{id}:
    patch:
      tags: ["Present Proof"]
      operationId: updatePresentation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique identifier of the presentation
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationAction"
              # oneOf:
              #  - $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationActionAccept"
              #  - $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationActionReject"
      responses:
        "200":
          description: Update the presentation record
        "404":
          description: There is no presentation record existing with the 'id'
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
    get:
      tags: ["Present Proof"]
      operationId: getPresentation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique identifier of the presentation
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      summary: Returns an existing presentation record by id.
      responses:
        "200":
          description: Presentation state record
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/PresentationStatus"
        "404":
          description: There is no presentation record matching the given 'id'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  # ----------------------------------
  # Connect
  # ----------------------------------
  /connections:
    post:
      tags: ["Connections Management"]
      operationId: createConnection
      summary: Creates a new connection record and returns an Out of Band invitation.
      description: |
        Generates a new Peer DID and creates an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation.
        It returns a new connection record in `InvitationGenerated` state.
        The request body may contain a `label` that can be used as a human readable alias for the connection, for example `{'label': "Bob"}`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/CreateConnectionRequest"

      responses:
        "201":
          description: The connection record was created successfully, and is returned in the response body.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "422":
          description: The connection record creation failed. More information on the error can be found in the response body.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"

    get:
      tags: ["Connections Management"]
      operationId: getConnections
      summary: Gets the list of connection records.
      responses:
        "200":
          description: The list of connection records.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ConnectionCollection"
        "500":
          description: Retrieving the connection records failed for an unexpected reason. More information on the error can be found in the response body.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"

  /connections/{connectionId}:
    get:
      tags: ["Connections Management"]
      parameters:
        - $ref: "./connect/schemas.yaml#/components/parameters/connectionId"
      operationId: getConnection
      summary: Gets an existing connection record by its unique identifier.
      responses:
        "200":
          description: The connection record.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "404":
          description: There is no connection record matching the given identifier.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"

  /connection-invitations:
    post:
      tags: ["Connections Management"]
      operationId: acceptConnectionInvitation
      summary: Accepts an Out of Band invitation.
      description: |
        Accepts an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation, generates a new Peer DID,
        and submits a Connection Request to the inviter.
        It returns a connection object in `ConnectionRequestPending` state, until the Connection Request is eventually sent to the inviter by the prism-agent's background process. The connection object state will then automatically move to `ConnectionRequestSent`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./connect/schemas.yaml#/components/schemas/AcceptConnectionInvitationRequest"

      responses:
        "200":
          description: The invitation was successfully accepted.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/Connection"
        "500":
          description: Storing the connection invitation failed for an unexpected reason. More information on the error can be found in the response body.
          content:
            application/json:
              schema:
                $ref: "./connect/schemas.yaml#/components/schemas/ErrorResponse"
