openapi: 3.0.1
info:
  title: PrismAgent OpenAPI specification
  description: OpenAPI specification for Decentralized Identifiers (DID) Operations
  version: 0.1.0
  contact:
    name: Core DID
    email: atala-coredid@iohk.io
servers:
  - url: "https://k8s-dev.atalaprism.io/prism-agent/"
  - url: "http://localhost/prism-agent"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
security:
  - ApiKeyAuth: []
tags:
  # Castor
  - name: DID
    description: Generic DID Endpoints
  - name: DID Authentication
    description: DID Authentication REST API
  - name: DID Registrar
    description: DID Endpoints where keys are managed by PrismAgent
  # Pollux
  - name: Schema Registry
    description: Schema Registry REST API
  - name: Verification
    description: Verification Policies REST API
  - name: Present Proof
    description: Present Proof REST API
  # Connect
  - name: Connections Management
    description: API for driving connection process.

paths:
  # ----------------------------------
  # Castor
  # ----------------------------------
<<<<<<< HEAD:prism-agent/service/api/http/prism-agent-openapi-spec.yaml
=======
  /dids:
    post:
      tags: ["DID"]
      operationId: createDid
      summary: Publish DID create operation to blockchain.
      description: Publish DID create operation to blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateDIDRequest"
      responses:
        "202":
          description: Created DID. Publishing DID or Proof to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID publication failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

>>>>>>> 34686bac (WIP):prism-agent/api/http/prism-agent-openapi-spec.yaml
  /dids/{didRef}:
    get:
      tags: ["DID"]
      operationId: getDid
      summary: Resolve Prism DID
      description: Resolve Prism DID
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "200":
          description: The DID resource
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

<<<<<<< HEAD:prism-agent/service/api/http/prism-agent-openapi-spec.yaml
=======
  /dids/{didRef}/updates:
    post:
      tags: ["DID"]
      operationId: updateDid
      summary: Publish DID update operation to blockchain.
      description: Publish DID update operation to blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/UpdateDIDRequest"
      responses:
        "202":
          description: Updated DID. Publishing Updated DID or Update Proof to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID Update failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}/deactivations:
    post:
      tags: ["DID"]
      operationId: deactivateDID
      summary: Publish DID deactivate operation to blockchain.
      description: Publish DID deactivate operation to blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/DeactivateDIDRequest"
      responses:
        "202":
          description: Deactivating DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID Deactivation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}/recoveries:
    post:
      tags: ["DID"]
      operationId: recoverDid
      summary: Publish DID recover operation to blockchain.
      description: Publish DID recover operation to blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/RecoverDIDRequest"
      responses:
        "202":
          description: Recovered DID. Publishing Recovered DID or Recovery Proof to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access DID resource and publication status.
        "422":
          description: The DID Update failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-operations/{didOperationRef}:
    get:
      tags: ["DID Operations"]
      operationId: getDidOperation
      summary: Get Did Operation.
      description: Get Did Operation.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didOperationRefInPath"
      responses:
        "200":
          description: The DID Operation resource
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DidOperation"
        "404":
          description: There is no DID Operation existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /dids/{didRef}/operations:
    get:
      tags: ["DID Operations"]
      operationId: getDidOperationsByDidRef
      summary: Get All DID Operations for given DID.
      description: Get All DID Operations for given DID.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "200":
          description: All DID Operations for a given DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/GetDIDOperationsByDIDRefResponse"
        "404":
          description: There is no DID existing for the 'didRef'.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

>>>>>>> 34686bac (WIP):prism-agent/api/http/prism-agent-openapi-spec.yaml
  /authentication/challenges:
    post:
      tags: ["DID Authentication"]
      operationId: createDidAuthenticationChallenge
      summary: Create a new authentication challenge
      deprecated: true
      description: |
        Create a new authentication challenge that will be later verified
        by Castor for a relying-party.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateAuthenticationChallengeRequest"
      responses:
        "200":
          description: Authentication challenge created successfully
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/CreateAuthenticationChallengeResponse"
        "400":
          description: A create AuthenticationChallenge payload is malformed
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /authentication/challenge-submissions:
    post:
      tags: ["DID Authentication"]
      operationId: createDidAuthenticationChallengeSubmission
      summary: Create a verification from challenge
      deprecated: true
      description: |
        Submit a challenge submission that will be verified by Castor for a relying-party.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/AuthenticationChallengeSubmissionRequest"
      responses:
        "200":
          description: Authentication challenge has been successfully verified
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/AuthenticationChallengeSubmissionResponse"
        "400":
          description: ChallengeSubmission is malformed
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids:
    get:
      tags: ["DID Registrar"]
      operationId: listManagedDid
      summary: List all DIDs stored in PrismAgent's wallet
      description: List all DIDs stored in PrismAgent's wallet
      responses:
        "200":
          description: List managed DIDs
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ListManagedDIDResponse"
        "500":
          description: Internal Error.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

    post:
      tags: ["DID Registrar"]
      operationId: createManagedDid
      summary: Create unpublished DID and store it in PrismAgent's wallet
      description: |
        Create unpublished DID and store it inside PrismAgent's wallet. The private keys of the DID is
        managed by PrismAgent. The DID can later be published to blockchain using publications endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDidRequest"
      responses:
        "200":
          description: Created unpublished DID.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/CreateManagedDIDResponse"
        "422":
          description: The DID creation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /did-registrar/dids/{didRef}/publications:
    post:
      tags: ["DID Registrar"]
      operationId: publishManagedDid
      summary: Publish the DID stored in PrismAgent's wallet to the blockchain
      description: |
        Publish the DID stored in PrismAgent's wallet to the blockchain.
      parameters:
        - $ref: "./castor/parameters.yaml#/components/parameters/didRefInPath"
      responses:
        "202":
          description: Publishing DID to Blockchain.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/DIDOperationResponse"
        "422":
          description: The DID publication failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  # ----------------------------------
  # Pollux
  # ----------------------------------
  /schema-registry/schemas:
    get:
      tags:
        - Schema Registry
      summary: Lookup schemas by indexed fields
      description:
        "Lookup schemas by `author`, `name`, `tags` parameters and control
        the pagination by `offset` and `limit` parameters "
      operationId: lookupSchemasByQuery
      parameters:
        - name: author
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: tags
          in: query
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchemaPage
        "400":
          description:
            "Invalid value for: query parameter author, Invalid value for:
            query parameter name, Invalid value for: query parameter tags, Invalid
            value for: query parameter offset, Invalid value for: query parameter
            limit, Invalid value for: query parameter order"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/InternalServerError
    post:
      tags:
        - Schema Registry
      summary: Publish new schema to the schema registry
      description:
        Publish the new schema with attributes to the schema registry on
        behalf of Cloud Agent. Schema will be signed by the keys of Cloud Agent and
        issued by the DID that corresponds to it
      operationId: createSchema
      requestBody:
        description: Create schema input object with the metadata and attributes
        content:
          application/json:
            schema:
              $ref: ./pollux/schemas.yaml#/components/schemas/VerificationCredentialSchemaInput
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchema
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/InternalServerError
  /schema-registry/schemas/{id}:
    get:
      tags:
        - Schema Registry
      summary: Fetch the schema from the registry by id
      description:
        Fetch the schema by the unique identifier. Verifiable Credential
        Schema in json format is returned.
      operationId: getSchemaById
      parameters:
        - name: id
          in: path
          description: Get the schema by id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/VerifiableCredentialSchema
        "400":
          description: "Invalid value for: path parameter id"
          content:
            text/plain:
              schema:
                type: string
        "404":
<<<<<<< HEAD:prism-agent/service/api/http/prism-agent-openapi-spec.yaml
          description: ""
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/NotFound

  # ----------------------------------
  # Verification Policies
  # ----------------------------------
  /verification/policies:
    get:
      tags:
        - Verification
      summary: Lookup verification policies by query
      description:
        Lookup verification policies by `name`, `attributes`, `issuerDIDs`,
        and `credentialTypes` and control the pagination by `offset` and `limit` parameters
      operationId: lookupVerificationPoliciesByQuery
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: attributes
          in: query
          required: false
          schema:
            type: string
        - name: issuerDIDs
          in: query
          required: false
          schema:
            type: string
        - name: credentialTypes
          in: query
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: order
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyPage"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
    post:
      tags:
        - Verification
      summary: Create the new verification policy
      description: Create the new verification policy
      operationId: createVerificationPolicy
      requestBody:
        description: Create verification policy object
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyInput"
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
  /verification/policies/{id}:
    get:
      tags:
        - Verification
      summary: Fetch the verification policy by id
      description: Get the verification policy by id
      operationId: getVerificationPolicyById
      parameters:
        - name: id
          in: path
          description: Get the verification policy by id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/NotFound"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
    put:
      tags:
        - Verification
      summary: Update the verification policy object by id
      description:
        "Update the fields of the verification policy entry: `attributes`,
        `issuerDIDs`, `name`, `credentialTypes`, "
      operationId: updateVerificationPolicy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update verification policy object
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicyInput"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/VerificationPolicy"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/NotFound"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"
    delete:
      tags:
        - Verification
      summary: Delete the verification policy by id
      description: Delete the verification policy by id
      operationId: deleteVerificationPolicyById
      parameters:
        - name: id
          in: path
          description: Delete the verification policy by id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/BadRequest"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/NotFound"
        "500":
          description: ""
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/InternalServerError"

=======
          description: Schema is not found by id
>>>>>>> 34686bac (WIP):prism-agent/api/http/prism-agent-openapi-spec.yaml
  ## Issue Credential Protocol

  /issue-credentials/credential-offers:
    post:
      tags: ["Issue Credentials Protocol"]
      operationId: createCredentialOffer
      summary: As a VC issuer, create a new credential offer to be sent to a VC holder
      requestBody:
        description: CredentialOffer object with schema identifier and claims
        required: true
        content:
          application/json:
            schema:
              $ref: ./pollux/schemas.yaml#/components/schemas/CreateIssueCredentialRecordRequest
      responses:
        "201":
          description: The issue credential record
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "422":
          description: The issue credential record creation failed.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records:
    get:
      tags: ["Issue Credentials Protocol"]
      operationId: getCredentialRecords
      summary: Get credential records
      responses:
        "200":
          description: The issue credential records
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecordCollection
        "500":
          description: Retrieving the issue credential records failed for an unexpected reason.
          content:
            application/json:
              schema:
                $ref: "./castor/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}:
    get:
      tags: ["Issue Credentials Protocol"]
      operationId: getCredentialRecord
      summary: Get a credential record by Id
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential record
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record matching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}/accept-offer:
    post:
      tags: ["Issue Credentials Protocol"]
      operationId: acceptCredentialOffer
      summary: As a VC holder, accept a credential offer received from an issuer
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The issue credential offer has been accepted
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record maatching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"

  /issue-credentials/records/{recordId}/issue-credential:
    post:
      tags: ["Issue Credentials Protocol"]
      operationId: issueCredential
      summary: As a VC issuer, issue the VC for the specified issue credential record
      parameters:
        - $ref: ./pollux/parameters.yaml#/components/parameters/issueCredentialRecordIdInPath
      responses:
        "200":
          description: The VC has been issued
          content:
            application/json:
              schema:
                $ref: ./pollux/schemas.yaml#/components/schemas/IssueCredentialRecord
        "404":
          description: There is no issue credential record maatching the given 'recordId'.
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/ErrorResponse"
<<<<<<< HEAD:prism-agent/service/api/http/prism-agent-openapi-spec.yaml
=======
  ##

  /issue-credentials/credentials:
    post:
      tags: ["Issue Credentials"]
      operationId: createCredentials
      summary: Create a new instances of Verifiable Credentials objects
      description: |-
        New credentials are created and stored by Pollux backend in the database
        Credentials can be fetched either by issuance batchId or credential id
        Any other manipulations and the issuance protocols execution can be performed on this object
      requestBody:
        description: CredentialInput object with the metadata and claims
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["credentials"]
              properties:
                credentials:
                  type: array
                  items:
                    $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialInput"
                  example:
                    - subjectId: "did:prism:subject123"
                      schemaId: "unique schema id"
                      claims:
                        alumni_of: "University"
                        degree: "Master"
      responses:
        "201":
          description: "Array of created verifiable credentials objects"
          content:
            application/json:
              schema:
                type: object
                properties:
                  batchId:
                    type: string
                    description: "BatchId of the current set of credentials"
                  count:
                    type: integer
                    description: "Total count of the credential object in a given batch"
                  credentials:
                    type: array
                    items:
                      $ref: "./pollux/schemas.yaml#/components/schemas/JWTCompactSerialisation"

    get:
      tags: ["Issue Credentials"]
      operationId: getCredentialsByBatchId
      summary: Returns the list of the credentials associated with the given batchId
      description: Returns the list of the credentials associated with the given batchId
      parameters:
        - in: query
          name: batchId
          description: "Issuance batchId associated with the set of credentials"
          required: true
          schema:
            type: string
        - in: query
          name: offset
          description: "Offset pagination parameter"
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: "Limit pagination parameter"
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: "Paginated response of the verifiable credentials objects"
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialsPaginated"
  /issue-credentials/credentials/{id}:
    get:
      tags: ["Issue Credentials"]
      operationId: getCredentialById
      summary: Fetch the credential by id
      description: |-
        Fetch the credential by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Identifier of the credential
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      responses:
        "200":
          description: Successful response, instance of Verifiable Credential is returned
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredential"
        "404":
          description: Schema is not found by id
    put:
      tags: ["Issue Credentials"]
      operationId: updateCredentialById
      summary: Update the credential by id
      description: Update the credential by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Identifier of the credential
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialInput"
        required: true
      responses:
        "200":
          description: "Credential was updated successfully"
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredential"
    delete:
      tags: ["Issue Credentials"]
      operationId: deleteCredentialById
      summary: Delete the credential by id
      description: Delete the credential by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Identifier of the credential
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
      responses:
        "204":
          description: "Credential was deleted"
  /issue-credentials/issuance-batches:
    get:
      tags: ["Issue Credentials"]
      operationId: getIssuanceBatches
      summary: Fetch the available list of issuance-batches
      description: Fetch the list of issuance-batches
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        "200":
          description: Returns the paginated list of issuance-batch objects
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CIssuanceBatchPaginated"
  /issue-credentials/issuance-batches/{batchId}/actions:
    post:
      tags: ["Issue Credentials"]
      summary: "Submit the list of actions performed on the credentials associated with the issuance-batch"
      operationId: "submitIssuanceBatchActions"
      description: |-
        List of action is submitted, actions are scheduled and IDs are returned for tracking the status
        Each action is executed asynchronously in the sequential order according to the state of the issuance batch
        Sign -> Issue -> Send
      parameters:
        - in: path
          name: batchId
          description: "The batchId of the issuance-batch object"
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CIssuanceBatchAction"
        required: true
      responses:
        "200":
          description: "Returns the set of actions performed on the issuance-batch"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./pollux/schemas.yaml#/components/schemas/W3CIssuanceBatchAction"
    get:
      tags: ["Issue Credentials"]
      operationId: "getIssuanceBatchActions"
      summary: "Fetch the actions performed on the issuance-batch"
      description: "Fetch the actions performed on the issuance-batch"
      parameters:
        - in: path
          name: batchId
          description: "The batchId of the issuance-batch object"
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Returns the set of actions performed on the issuance-batch"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./pollux/schemas.yaml#/components/schemas/W3CIssuanceBatchAction"
>>>>>>> 34686bac (WIP):prism-agent/api/http/prism-agent-openapi-spec.yaml

  /revocation-registry/credential-status/{id}:
    get:
      tags: ["Revocation Registry"]
      operationId: getCredentialRevocationStatusById
      summary: Get credentials revocation status by credential id
      description: Get credentials revocation status by credential id
      parameters:
        - in: path
          name: id
          description: Verifiable Credential Id
          schema:
            type: string
          required: true
          example: "abcde12345"
      responses:
        "200":
          description: Status request processed successfully
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialStatus"
  /revocation-registry/revoke:
    post:
      tags: ["Revocation Registry"]
      operationId: revokeCredentialById
      summary: Revoke credential by id
      description: Revoke credential by id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialRevocationRequest"
        required: true
      responses:
        "202":
          description: Revocation request successfully submitted
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CCredentialRevocationResponse"
          headers:
            Location:
              schema:
                type: string
              description: URL to access credential revocation status.

  /revocation-registry/operations/{id}:
    get:
      tags: ["Revocation Registry"]
      operationId: getRevocationOperationStatusById
      summary: Get revocation operation status by id
      description: Get revocation operation status by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success, operation status is returned
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/RevocationStatus"

  /present-proof/presentations:
    post:
      tags: ["Present Proof"]
      operationId: requestPresentation
      requestBody:
        description: Request presentation of some type of Proof or Proofs (VC)
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationInput"
      responses:
        "201":
          description: The new presentation is created
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/RequestPresentationOutput"
    get:
      tags: ["Present Proof"]
      operationId: getAllPresentation
      responses:
        "200":
          description: List of presentations and status
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentationPaginated"
  /present-proof/verifiable-presentations/{id}:
    get:
      tags: ["Present Proof"]
<<<<<<< HEAD:prism-agent/service/api/http/prism-agent-openapi-spec.yaml
      operationId: getPresentationById
      summary: Fetch the presentation from the collection by id
      description: Fetch the presentation from the collection by id
=======
      operationId: sendPresentation
>>>>>>> 34686bac (WIP):prism-agent/api/http/prism-agent-openapi-spec.yaml
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique identifier of the presentation
          example: "06e126d1-fa44-4882-a243-1e326fbe21db"
<<<<<<< HEAD:prism-agent/service/api/http/prism-agent-openapi-spec.yaml
=======
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./pollux/schemas.yaml#/components/schemas/SendPresentationInput"
>>>>>>> 34686bac (WIP):prism-agent/api/http/prism-agent-openapi-spec.yaml
      responses:
        "200":
          description: Successful response, the presentation is returned
          content:
            application/json:
              schema:
                $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentation"

  # /present-proof/verifiable-presentations:
  #   post:
  #     tags: ["Present Proof"]
  #     operationId: createVerifiablePresentation
  #     summary: Create new instance of VerifiablePresentation
  #     description: Verifier creates the instance of Verifiable Presentation object to be used in present proof communication protocol with Prover
  #     requestBody:
  #       description: PresentationInput object with the schema references and claims
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentationInput"
  #     responses:
  #       "201":
  #         description: The new presentation is created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentation"
  #       # TODO: Add other corner cases and error responses

  #   get:
  #     tags: ["Present Proof"]
  #     operationId: fetchPresentationByQuery
  #     summary: Fetch presentation by query
  #     description: Fetch presentation by query
  #     parameters: # TODO: Define the parameters for the presentation lookup
  #       - in: query
  #         name: name
  #         description: Fetch presentation by the name
  #         example: TemplateName
  #         schema:
  #           type: string
  #       - in: query
  #         name: offset
  #         description: Pagination offset
  #         example: 15
  #         schema:
  #           type: integer
  #       - in: query
  #         name: limit
  #         description: Pagination limit
  #         example: 100
  #         schema:
  #           type: integer
  #     responses:
  #       "200":
  #         description: Presentations are fetched by the query
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentationPaginated"
  # /present-proof/verifiable-presentations/{id}:
  #   get:
  #     tags: ["Present Proof"]
  #     operationId: getPresentationById
  #     summary: Fetch the presentation from the collection by id
  #     description: Fetch the presentation from the collection by id
  #     parameters:
  #       - in: path
  #         name: id
  #         schema:
  #           type: string
  #         required: true
  #         description: Unique identifier of the presentation
  #         example: "06e126d1-fa44-4882-a243-1e326fbe21db"
  #     responses:
  #       "200":
  #         description: Successful response, the presentation is returned
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "./pollux/schemas.yaml#/components/schemas/W3CPresentation"
