/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.iohk.atala.prism.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.iohk.atala.prism.models.CreateManagedDIDResponse
import io.iohk.atala.prism.models.CreateManagedDidRequest
import io.iohk.atala.prism.models.DIDOperationResponse
import io.iohk.atala.prism.models.ErrorResponse
import io.iohk.atala.prism.models.ManagedDID
import io.iohk.atala.prism.models.ManagedDIDPage
import io.iohk.atala.prism.models.UpdateManagedDIDRequest

import com.squareup.moshi.Json

import io.iohk.atala.prism.infrastructure.ApiClient
import io.iohk.atala.prism.infrastructure.ApiResponse
import io.iohk.atala.prism.infrastructure.ClientException
import io.iohk.atala.prism.infrastructure.ClientError
import io.iohk.atala.prism.infrastructure.ServerException
import io.iohk.atala.prism.infrastructure.ServerError
import io.iohk.atala.prism.infrastructure.MultiValueMap
import io.iohk.atala.prism.infrastructure.PartConfig
import io.iohk.atala.prism.infrastructure.RequestConfig
import io.iohk.atala.prism.infrastructure.RequestMethod
import io.iohk.atala.prism.infrastructure.ResponseType
import io.iohk.atala.prism.infrastructure.Success
import io.iohk.atala.prism.infrastructure.toMultiValue

class DIDRegistrarApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * List all DIDs stored in Prism Agent&#39;s wallet
     * List all DIDs stored in Prism Agent&#39;s wallet. Return a paginated items ordered by created timestamp. If the &#x60;limit&#x60; parameter is not set, it defaults to 100 items per page.
     * @param offset  (optional)
     * @param limit  (optional)
     * @return ManagedDIDPage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDidRegistrarDids(offset: kotlin.Int? = null, limit: kotlin.Int? = null) : ManagedDIDPage {
        val localVarResponse = getDidRegistrarDidsWithHttpInfo(offset = offset, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ManagedDIDPage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List all DIDs stored in Prism Agent&#39;s wallet
     * List all DIDs stored in Prism Agent&#39;s wallet. Return a paginated items ordered by created timestamp. If the &#x60;limit&#x60; parameter is not set, it defaults to 100 items per page.
     * @param offset  (optional)
     * @param limit  (optional)
     * @return ApiResponse<ManagedDIDPage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDidRegistrarDidsWithHttpInfo(offset: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<ManagedDIDPage?> {
        val localVariableConfig = getDidRegistrarDidsRequestConfig(offset = offset, limit = limit)

        return request<Unit, ManagedDIDPage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDidRegistrarDids
     *
     * @param offset  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun getDidRegistrarDidsRequestConfig(offset: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/did-registrar/dids",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get DID stored in Prism Agent&#39;s wallet
     * Get DID stored in Prism Agent&#39;s wallet
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return ManagedDID
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDidRegistrarDidsDidref(didRef: kotlin.String) : ManagedDID {
        val localVarResponse = getDidRegistrarDidsDidrefWithHttpInfo(didRef = didRef)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ManagedDID
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get DID stored in Prism Agent&#39;s wallet
     * Get DID stored in Prism Agent&#39;s wallet
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return ApiResponse<ManagedDID?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDidRegistrarDidsDidrefWithHttpInfo(didRef: kotlin.String) : ApiResponse<ManagedDID?> {
        val localVariableConfig = getDidRegistrarDidsDidrefRequestConfig(didRef = didRef)

        return request<Unit, ManagedDID>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDidRegistrarDidsDidref
     *
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return RequestConfig
     */
    fun getDidRegistrarDidsDidrefRequestConfig(didRef: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/did-registrar/dids/{didRef}".replace("{"+"didRef"+"}", encodeURIComponent(didRef.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Create unpublished DID and store it in Prism Agent&#39;s wallet
     * Create unpublished DID and store it inside Prism Agent&#39;s wallet. The private keys of the DID is managed by Prism Agent. The DID can later be published to the VDR using publications endpoint.
     * @param createManagedDidRequest 
     * @return CreateManagedDIDResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postDidRegistrarDids(createManagedDidRequest: CreateManagedDidRequest) : CreateManagedDIDResponse {
        val localVarResponse = postDidRegistrarDidsWithHttpInfo(createManagedDidRequest = createManagedDidRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateManagedDIDResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create unpublished DID and store it in Prism Agent&#39;s wallet
     * Create unpublished DID and store it inside Prism Agent&#39;s wallet. The private keys of the DID is managed by Prism Agent. The DID can later be published to the VDR using publications endpoint.
     * @param createManagedDidRequest 
     * @return ApiResponse<CreateManagedDIDResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postDidRegistrarDidsWithHttpInfo(createManagedDidRequest: CreateManagedDidRequest) : ApiResponse<CreateManagedDIDResponse?> {
        val localVariableConfig = postDidRegistrarDidsRequestConfig(createManagedDidRequest = createManagedDidRequest)

        return request<CreateManagedDidRequest, CreateManagedDIDResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postDidRegistrarDids
     *
     * @param createManagedDidRequest 
     * @return RequestConfig
     */
    fun postDidRegistrarDidsRequestConfig(createManagedDidRequest: CreateManagedDidRequest) : RequestConfig<CreateManagedDidRequest> {
        val localVariableBody = createManagedDidRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/did-registrar/dids",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Deactivate DID in Prism Agent&#39;s wallet and post deactivate operation to the VDR
     * Deactivate DID in Prism Agent&#39;s wallet and post deactivate operation to the VDR.
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return DIDOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postDidRegistrarDidsDidrefDeactivations(didRef: kotlin.String) : DIDOperationResponse {
        val localVarResponse = postDidRegistrarDidsDidrefDeactivationsWithHttpInfo(didRef = didRef)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DIDOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Deactivate DID in Prism Agent&#39;s wallet and post deactivate operation to the VDR
     * Deactivate DID in Prism Agent&#39;s wallet and post deactivate operation to the VDR.
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return ApiResponse<DIDOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postDidRegistrarDidsDidrefDeactivationsWithHttpInfo(didRef: kotlin.String) : ApiResponse<DIDOperationResponse?> {
        val localVariableConfig = postDidRegistrarDidsDidrefDeactivationsRequestConfig(didRef = didRef)

        return request<Unit, DIDOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postDidRegistrarDidsDidrefDeactivations
     *
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return RequestConfig
     */
    fun postDidRegistrarDidsDidrefDeactivationsRequestConfig(didRef: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/did-registrar/dids/{didRef}/deactivations".replace("{"+"didRef"+"}", encodeURIComponent(didRef.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Publish the DID stored in Prism Agent&#39;s wallet to the VDR
     * Publish the DID stored in Prism Agent&#39;s wallet to the VDR.
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return DIDOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postDidRegistrarDidsDidrefPublications(didRef: kotlin.String) : DIDOperationResponse {
        val localVarResponse = postDidRegistrarDidsDidrefPublicationsWithHttpInfo(didRef = didRef)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DIDOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Publish the DID stored in Prism Agent&#39;s wallet to the VDR
     * Publish the DID stored in Prism Agent&#39;s wallet to the VDR.
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return ApiResponse<DIDOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postDidRegistrarDidsDidrefPublicationsWithHttpInfo(didRef: kotlin.String) : ApiResponse<DIDOperationResponse?> {
        val localVariableConfig = postDidRegistrarDidsDidrefPublicationsRequestConfig(didRef = didRef)

        return request<Unit, DIDOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postDidRegistrarDidsDidrefPublications
     *
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @return RequestConfig
     */
    fun postDidRegistrarDidsDidrefPublicationsRequestConfig(didRef: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/did-registrar/dids/{didRef}/publications".replace("{"+"didRef"+"}", encodeURIComponent(didRef.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update DID in Prism Agent&#39;s wallet and post update operation to the VDR
     * Update DID in Prism Agent&#39;s wallet and post update operation to the VDR. This endpoint updates the DID document from the last confirmed operation. Submitting multiple update operations without waiting for confirmation will result in some operations being rejected as only one operation is allowed to be appended to the last confirmed operation.
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @param updateManagedDIDRequest 
     * @return DIDOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postDidRegistrarDidsDidrefUpdates(didRef: kotlin.String, updateManagedDIDRequest: UpdateManagedDIDRequest) : DIDOperationResponse {
        val localVarResponse = postDidRegistrarDidsDidrefUpdatesWithHttpInfo(didRef = didRef, updateManagedDIDRequest = updateManagedDIDRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DIDOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update DID in Prism Agent&#39;s wallet and post update operation to the VDR
     * Update DID in Prism Agent&#39;s wallet and post update operation to the VDR. This endpoint updates the DID document from the last confirmed operation. Submitting multiple update operations without waiting for confirmation will result in some operations being rejected as only one operation is allowed to be appended to the last confirmed operation.
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @param updateManagedDIDRequest 
     * @return ApiResponse<DIDOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postDidRegistrarDidsDidrefUpdatesWithHttpInfo(didRef: kotlin.String, updateManagedDIDRequest: UpdateManagedDIDRequest) : ApiResponse<DIDOperationResponse?> {
        val localVariableConfig = postDidRegistrarDidsDidrefUpdatesRequestConfig(didRef = didRef, updateManagedDIDRequest = updateManagedDIDRequest)

        return request<UpdateManagedDIDRequest, DIDOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postDidRegistrarDidsDidrefUpdates
     *
     * @param didRef Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax)
     * @param updateManagedDIDRequest 
     * @return RequestConfig
     */
    fun postDidRegistrarDidsDidrefUpdatesRequestConfig(didRef: kotlin.String, updateManagedDIDRequest: UpdateManagedDIDRequest) : RequestConfig<UpdateManagedDIDRequest> {
        val localVariableBody = updateManagedDIDRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/did-registrar/dids/{didRef}/updates".replace("{"+"didRef"+"}", encodeURIComponent(didRef.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
