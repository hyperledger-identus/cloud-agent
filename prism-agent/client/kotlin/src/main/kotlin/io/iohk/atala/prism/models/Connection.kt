/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.iohk.atala.prism.models

import io.iohk.atala.prism.models.ConnectionInvitation

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param connectionId The unique identifier of the connection.
 * @param role The role played by the Prism agent in the connection flow.
 * @param state The current state of the connection protocol execution.
 * @param invitation 
 * @param createdAt The date and time the connection record was created.
 * @param self The reference to the connection resource.
 * @param kind The type of object returned. In this case a `Connection`.
 * @param label A human readable alias for the connection.
 * @param myDid The DID representing me as the inviter or invitee in this specific connection.
 * @param theirDid The DID representing the other peer as the an inviter or invitee in this specific connection.
 * @param updatedAt The date and time the connection record was last updated.
 */


data class Connection (

    /* The unique identifier of the connection. */
    @Json(name = "connectionId")
    val connectionId: java.util.UUID,

    /* The role played by the Prism agent in the connection flow. */
    @Json(name = "role")
    val role: Connection.Role,

    /* The current state of the connection protocol execution. */
    @Json(name = "state")
    val state: Connection.State,

    @Json(name = "invitation")
    val invitation: ConnectionInvitation,

    /* The date and time the connection record was created. */
    @Json(name = "createdAt")
    val createdAt: java.time.OffsetDateTime,

    /* The reference to the connection resource. */
    @Json(name = "self")
    val self: kotlin.String,

    /* The type of object returned. In this case a `Connection`. */
    @Json(name = "kind")
    val kind: kotlin.String,

    /* A human readable alias for the connection. */
    @Json(name = "label")
    val label: kotlin.String? = null,

    /* The DID representing me as the inviter or invitee in this specific connection. */
    @Json(name = "myDid")
    val myDid: kotlin.String? = null,

    /* The DID representing the other peer as the an inviter or invitee in this specific connection. */
    @Json(name = "theirDid")
    val theirDid: kotlin.String? = null,

    /* The date and time the connection record was last updated. */
    @Json(name = "updatedAt")
    val updatedAt: java.time.OffsetDateTime? = null

) {

    /**
     * The role played by the Prism agent in the connection flow.
     *
     * Values: inviter,invitee
     */
    @JsonClass(generateAdapter = false)
    enum class Role(val value: kotlin.String) {
        @Json(name = "Inviter") inviter("Inviter"),
        @Json(name = "Invitee") invitee("Invitee");
    }
    /**
     * The current state of the connection protocol execution.
     *
     * Values: invitationGenerated,invitationReceived,connectionRequestPending,connectionRequestSent,connectionRequestReceived,connectionResponsePending,connectionResponseSent,connectionResponseReceived,problemReportPending,problemReportSent,problemReportReceived
     */
    @JsonClass(generateAdapter = false)
    enum class State(val value: kotlin.String) {
        @Json(name = "InvitationGenerated") invitationGenerated("InvitationGenerated"),
        @Json(name = "InvitationReceived") invitationReceived("InvitationReceived"),
        @Json(name = "ConnectionRequestPending") connectionRequestPending("ConnectionRequestPending"),
        @Json(name = "ConnectionRequestSent") connectionRequestSent("ConnectionRequestSent"),
        @Json(name = "ConnectionRequestReceived") connectionRequestReceived("ConnectionRequestReceived"),
        @Json(name = "ConnectionResponsePending") connectionResponsePending("ConnectionResponsePending"),
        @Json(name = "ConnectionResponseSent") connectionResponseSent("ConnectionResponseSent"),
        @Json(name = "ConnectionResponseReceived") connectionResponseReceived("ConnectionResponseReceived"),
        @Json(name = "ProblemReportPending") problemReportPending("ProblemReportPending"),
        @Json(name = "ProblemReportSent") problemReportSent("ProblemReportSent"),
        @Json(name = "ProblemReportReceived") problemReportReceived("ProblemReportReceived");
    }
}

