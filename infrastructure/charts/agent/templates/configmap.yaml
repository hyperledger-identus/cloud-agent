apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-bootstrap-script
  labels:
    {{- include "labels.common" . | nindent 4 }}
data:
  init.ts: |
    const KEYCLOAK_BASE_URL = process.env.KEYCLOAK_BASE_URL!;
    const KEYCLOAK_ADMIN_USER = process.env.KEYCLOAK_ADMIN_USER!;
    const KEYCLOAK_ADMIN_PASSWORD = process.env.KEYCLOAK_ADMIN_PASSWORD!;
    const REALM_NAME = process.env.REALM_NAME!;
    const CLOUD_AGENT_CLIENT_ID = process.env.CLOUD_AGENT_CLIENT_ID!;
    const CLOUD_AGENT_CLIENT_SECRET = process.env.CLOUD_AGENT_CLIENT_SECRET!;

    async function getAdminToken(): Promise<string> {
      const req = new Request(`${KEYCLOAK_BASE_URL}/realms/master/protocol/openid-connect/token`, {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({
          "grant_type": "password",
          "client_id": "admin-cli",
          "username": KEYCLOAK_ADMIN_USER,
          "password": KEYCLOAK_ADMIN_PASSWORD,
        })
      });
      const resp = await fetch(req);
      const body = await resp.json();
      if (resp.status !== 200) {
        throw new Error("Response did not return success status code." +
          ` Status: ${resp.status}, Body: ${JSON.stringify(body)}`
        );
      }
      return body["access_token"];
    }

    async function createRealm(accessToken: string) {
      const req = new Request(`${KEYCLOAK_BASE_URL}/admin/realms`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`
        },
        body: JSON.stringify({
          "realm": REALM_NAME,
          "enabled": true,
        })
      });
      await fetch(req);
    }

    async function createRealmIfNotExist(accessToken: string) {
      const req = new Request(`${KEYCLOAK_BASE_URL}/admin/realms/${REALM_NAME}`, {
        method: "GET",
        headers: { "Authorization": `Bearer ${accessToken}` }
      });
      const resp = await fetch(req);
      if (resp.status !== 200) {
        console.log(`Creating a new ${REALM_NAME} realm ...`);
        await createRealm(accessToken);
      } else {
        console.log(`Realm ${REALM_NAME} already exists.`)
      }
    }

    async function createClient(accessToken: string) {
      const req = new Request(`${KEYCLOAK_BASE_URL}/admin/realms/${REALM_NAME}/clients`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${accessToken}`
        },
        body: JSON.stringify({
          "id": CLOUD_AGENT_CLIENT_ID,
          "directAccessGrantsEnabled": true,
          "authorizationServicesEnabled": true,
          "serviceAccountsEnabled": true,
          "secret": CLOUD_AGENT_CLIENT_SECRET
        })
      });
      await fetch(req);
    }

    async function createClientIfNotExist(accessToken: string) {
      const req = new Request(`${KEYCLOAK_BASE_URL}/admin/realms/${REALM_NAME}/clients/${CLOUD_AGENT_CLIENT_ID}`, {
        method: "GET",
        headers: { "Authorization": `Bearer ${accessToken}` }
      });
      const resp = await fetch(req);
      if (resp.status !== 200) {
        console.log(`Creating a new ${CLOUD_AGENT_CLIENT_ID} client ...`);
        createClient(accessToken);
      } else {
        console.log(`Client ${CLOUD_AGENT_CLIENT_ID} already exists.`)
      }
    }

    (async () => {
      console.log("Getting admin access token ...");
      const adminToken = await getAdminToken();
      await createRealmIfNotExist(adminToken);
      await createClientIfNotExist(adminToken);
    })();

{{- if .Values.keycloak.enabled }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cloud-agent.name" . }}-realm-import
  labels:
    {{- include "labels.common" . | nindent 4}}
data:
  {{ include "cloud-agent.name" . }}.json: |
    {
      "realm": {{ .Values.server.keycloak.realm | quote }},
      "enabled": true
    }

{{- end }}
